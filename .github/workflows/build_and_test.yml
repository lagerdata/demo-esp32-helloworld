name: Workflow for building and running some simple hardware tests
on: [push]
env:
  LAGER_GATEWAY: 113
concurrency: 
  group: dut
  cancel-in-progress: false

jobs:
  build_and_flash:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Build and Flash Project
        uses: docker://lagerdata/devenv-esp32:version-1.0
        env:
          LAGER_TOKEN_ID: ${{ secrets.LAGER_TOKEN_ID }} 
          LAGER_TOKEN_SECRET: ${{ secrets.LAGER_TOKEN_SECRET }}        
        with:
          entrypoint: lager
          args: exec build_and_flash -u root

      - name: Upload test
        uses: actions/upload-artifact@v2
        with:
          name: hello_world_test
          path: tests/test.py

      - name: save the esp32 app
        uses: actions/upload-artifact@v2.2.4
        with:
          name: demo-esp32-hello-world
          path: |
            ./build/bootloader/bootloader.*
            ./build/partition_table/partition-table.bin
            ./build/hello-world.*
            ./build/spiffs.bin
            ./build/ota_data_initial.bin
            ./build/*args
          retention-days: 3

      - name: Download esp32-hello-world zip
        uses: actions/download-artifact@v2
        with:
          name: demo-esp32-hello-world

      - name: Unzip demo-esp32-hello-world
        run: tar -xvzf /home/runner/work/demo-esp32-helloworld/demo-esp32-hello-world

  test: #test basic functionality
    runs-on: ubuntu-latest
    needs: [build_and_flash]
    steps:
      - name: Download test script
        uses: actions/download-artifact@v2
        with:
          name: hello_world_test

      - name: Test Hello World
        uses: docker://lagerdata/lager-cli
        env:
          LAGER_TOKEN_ID: ${{ secrets.LAGER_TOKEN_ID }} 
          LAGER_TOKEN_SECRET: ${{ secrets.LAGER_TOKEN_SECRET }}
        with:
          entrypoint: lager
          args: python test.py